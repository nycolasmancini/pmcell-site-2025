generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Administradores do sistema
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Categorias de produtos
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

// Fornecedores (uso interno)
model Supplier {
  id           String    @id @default(cuid())
  name         String
  phone        String?   // Telefone do fornecedor
  address      String?
  email        String?
  notes        String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     ProductSupplier[]
}

// Marcas para capas e películas
model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  order     Int      @default(0)
  createdAt DateTime @default(now())
  models    Model[]
}

// Modelos de celular
model Model {
  id           String         @id @default(cuid())
  name         String
  brandId      String
  brand        Brand          @relation(fields: [brandId], references: [id])
  createdAt    DateTime       @default(now())
  productModels ProductModel[]

  @@unique([brandId, name])
}

// Produtos
model Product {
  id                String            @id @default(cuid())
  name              String
  subname           String?           // Variação ou detalhe (ex: tipo de saída do cabo)
  description       String?
  brand             String?           // Marca do produto
  categoryId        String
  category          Category          @relation(fields: [categoryId], references: [id])
  
  // Preços
  price             Float             // Preço atacado normal
  specialPrice      Float?            // Preço especial para quantidade (mantido)
  specialQuantity   Int?              // Quantidade mínima para preço especial (mantido)
  superWholesalePrice Float?          // Preço para super atacado
  superWholesaleQuantity Int?         // Quantidade mínima para super atacado
  
  // Informações internas
  cost              Float?            // Preço de custo (interno)
  boxQuantity       Int?              // Quantidade por caixa fechada
  
  // Status
  isActive          Boolean           @default(true)
  featured          Boolean           @default(false)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relações
  images            ProductImage[]    // Múltiplas imagens
  suppliers         ProductSupplier[]
  models            ProductModel[]    // Para capas e películas
  orderItems        OrderItem[]
  kitProducts       KitProduct[]
}

// Imagens do produto
model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String   @db.Text // Usar TEXT para suportar Base64 longas
  fileName  String?  // Nome original do arquivo
  order     Int      @default(0) // Ordem de exibição
  isMain    Boolean  @default(false) // Imagem principal
  createdAt DateTime @default(now())
}

// Relação produto-fornecedor (histórico)
model ProductSupplier {
  id         String    @id @default(cuid())
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  supplierId String
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
  cost       Float     // Custo neste fornecedor
  isActive   Boolean   @default(true)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([productId, supplierId])
}

// Relação produto-modelo (para capas e películas)
model ProductModel {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  modelId   String
  model     Model    @relation(fields: [modelId], references: [id])
  price     Float?   // Preço específico para este modelo
  createdAt DateTime @default(now())

  @@unique([productId, modelId])
}

// Kits pré-definidos
model Kit {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  discount    Float        // Desconto fixo em R$
  image       String?
  order       Int          @default(0)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  products    KitProduct[]
}

// Produtos dentro dos kits
model KitProduct {
  id        String   @id @default(cuid())
  kitId     String
  kit       Kit      @relation(fields: [kitId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([kitId, productId])
}

// Clientes
model Customer {
  id          String   @id @default(cuid())
  name        String
  whatsapp    String   @unique
  email       String?
  company     String?
  cnpj        String?
  firstAccess DateTime @default(now())
  lastAccess  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

// Status do pedido
enum OrderStatus {
  PENDING    // Aguardando atendimento
  PROCESSING // Em atendimento
  CONFIRMED  // Confirmado
  CANCELLED  // Cancelado
  COMPLETED  // Finalizado
}

// Pedidos
model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  customerId     String
  customer       Customer    @relation(fields: [customerId], references: [id])
  
  // Valores
  subtotal       Float
  discount       Float       @default(0)
  total          Float
  
  // Status e atribuição
  status         OrderStatus @default(PENDING)
  assignedSeller String?     // Vendedor atribuído via webhook
  
  // Observações
  notes          String?
  internalNotes  String?     // Notas internas (não visível ao cliente)
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  confirmedAt    DateTime?
  completedAt    DateTime?
  
  items          OrderItem[]
  webhookLogs    WebhookLog[]
}

// Itens do pedido
model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  
  // Dados do produto no momento da compra
  productName String
  modelName   String?  // Para capas/películas
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  createdAt   DateTime @default(now())
}

// Configurações da empresa
model CompanySettings {
  id            String   @id @default(cuid())
  companyName   String
  tradeName     String?  // Nome fantasia
  cnpj          String?
  logo          String?
  primaryColor  String   @default("#FC6D36")
  
  // Contato
  phone         String?
  whatsapp      String?
  email         String?
  address       String?
  
  // Redes sociais
  instagram     String?
  facebook      String?
  
  // Textos legais
  privacyPolicy String?
  termsOfUse    String?
  aboutUs       String?
  
  // Configurações de negócio
  minOrderValue Float?   // Valor mínimo do pedido
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Tipos de eventos para webhook
enum WebhookEventType {
  PRICE_UNLOCK      // Cliente liberou preços
  ORDER_CREATED     // Pedido criado
  ORDER_UPDATED     // Pedido atualizado
  CART_ABANDONED    // Carrinho abandonado
  PRODUCT_SEARCH    // Busca de produto
  PRODUCT_VIEW      // Visualização de produto
  CATEGORY_VIEW     // Navegação em categoria
}

// Log de webhooks
model WebhookLog {
  id          String           @id @default(cuid())
  eventType   WebhookEventType
  orderId     String?
  order       Order?           @relation(fields: [orderId], references: [id])
  payload     Json
  response    Json?
  statusCode  Int?
  success     Boolean          @default(false)
  errorMessage String?
  createdAt   DateTime         @default(now())
}

// Sessões de navegação (para tracking)
model Session {
  id           String   @id @default(cuid())
  whatsapp     String?
  unlocked     Boolean  @default(false) // Se já liberou preços
  unlockedAt   DateTime?
  lastActivity DateTime @default(now())
  cartData     Json?    // Dados do carrinho salvos
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Modelos para Analytics
model AnalyticsSession {
  id                  String   @id @default(cuid())
  sessionId          String   @unique
  whatsapp           String?
  startTime          DateTime @default(now())
  lastActivity       DateTime @default(now())
  timeOnSite         Int      @default(0)
  whatsappCollectedAt DateTime?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PageView {
  id        String   @id @default(cuid())
  sessionId String
  path      String
  title     String?
  duration  Int?
  timestamp DateTime
  createdAt DateTime @default(now())
}

model CategoryVisit {
  id           String   @id @default(cuid())
  sessionId    String
  categoryId   String
  categoryName String
  visits       Int
  lastVisit    DateTime
  hasCartItems Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@unique([sessionId, categoryId])
}

model ProductView {
  id           String   @id @default(cuid())
  sessionId    String
  productId    String
  productName  String
  categoryName String
  visits       Int
  lastView     DateTime
  addedToCart  Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@unique([sessionId, productId])
}

model SearchHistory {
  id         String   @id @default(cuid())
  sessionId  String
  term       String
  count      Int
  lastSearch DateTime
  createdAt  DateTime @default(now())

  @@unique([sessionId, term])
}

enum CartEventType {
  ADD
  REMOVE
  UPDATE
  CLEAR
  COMPLETE
  ABANDON
}

model CartEvent {
  id          String        @id @default(cuid())
  sessionId   String
  type        CartEventType
  productId   String
  productName String?
  quantity    Int
  unitPrice   Float?
  totalPrice  Float?
  timestamp   DateTime
  createdAt   DateTime      @default(now())
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}